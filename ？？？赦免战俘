现有 2^n x 2^n (n≤10) 名作弊者站成一个正方形方阵等候 kkksc03 的发落。kkksc03 决定赦免一些作弊者。他将正方形矩阵均分为 4 个更小的正方形矩阵，每个更小的矩阵的边长是原矩阵的一半。
其中左上角那一个矩阵的所有作弊者都将得到赦免，剩下 3 个小矩阵中，每一个矩阵继续分为 4 个更小的矩阵，然后通过同样的方式赦免作弊者……直到矩阵无法再分下去为止。
所有没有被赦免的作弊者都将被处以棕名处罚。

给出 n，请输出每名作弊者的命运，其中 0 代表被赦免，1 代表不被赦免。

输入格式
一个整数 n。

输出格式
2^n x 2^n 的 01 矩阵，代表每个人是否被赦免。数字之间有一个空格。

/*#include<bits/stdc++.h>
#include<iostream>
#include<cstdio>

using namespace std;

bool peo[1050][1050];

void func(int x1,int y1,int x2,int y2) {
	for(int i=x1;i<=(x1+x2)/2;i++) {
		for(int j=y1;j<=(y1+y2)/2;j++) {
			peo[i][j]=0;
		}
	}
	if(abs(x1-x2)==1&&abs(y1-y2)==1) {
		return;
	}
	func(x1,y1+(y2-y1+1)/2,x2+(x2-x1+1)/2-1,y2);
	func(x1+(x2-x1+1)/2,y1,x2,y2+(y2-y1+1)/2-1);
	func(x1+(x2-x1+1)/2,y1+(y2-y1+1)/2,x2,y2);
}

int main() {
	int n;
	scanf("%d",&n);
	int len=1;
	for(int i=1;i<=n;i++) {
		len*=2;
	}
	memset(peo,true,sizeof(peo));
	func(1,1,len,len);
	for(int i=1;i<=len;i++) {
		for(int j=1;j<=len;j++) {
			cout<<peo[i][j];
		}
		cout<<endl;
	}
	return 0;
} */

//两种思路其实一样的喔，但是不知道为啥上面那个错了，输出相当诡异
//希望某天可以改一下

#include<bits/stdc++.h>
using namespace std;

int mapp[1050][1050];
int n;

void func(int x1,int x2,int y1,int y2){
    for(int i=x1;i<x1+(x2-x1+1)/2;i++){
        for(int j=y1;j<y1+(y2-y1+1)/2;j++){
            mapp[i][j]=false;
        }
    }
	if(abs(x1-x2)==1&&abs(y1-y2)==1) return ;
	func(x1,x1+(x2-x1+1)/2-1,y1+(y2-y1+1)/2,y2);
	func(x1+(x2-x1+1)/2,x2,y1,y1+(y2-y1+1)/2-1);
	func(x1+(x2-x1+1)/2,x2,y1+(y2-y1+1)/2,y2);
}

int main() {
	scanf("%d",&n);
	int a=1;
	for(int i=1;i<=n;i++) {
		a*=2;
	}
	for(int i=1;i<=a;i++) {
		for(int j=1;j<=a;j++) {
			mapp[i][j]=1;
		}
	}
	func(1,a,1,a);
	for(int i=1;i<=a;i++) {
		for(int j=1;j<=a;j++) {
			cout<<mapp[i][j]<<' ';
		}
		cout<<endl;
	}
	return 0;
}
