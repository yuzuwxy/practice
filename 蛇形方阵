#include<bits/stdc++.h>
using namespace std;
int main() {
	int tu[10][10];
	int n;
	scanf("%d",&n);
	memset(tu,0,sizeof(tu));
	int x=1,y=1;
	tu[x][y]=1;
	int k=1;
	while(k<=n*n) {
		while(x<=n&&!tu[x][y+1]) tu[x][++y]=++k;
		while(y<=n&&!tu[x+1][y]) tu[++x][y]=++k;
		while(y>=1&&!tu[x][y-1]) tu[x][--y]=++k;
		while(x>=1&&!tu[x-1][y]) tu[--x][y]=++k;
	}
	for(int i=1;i<=n;i++) {
		for(int j=1;j<=n;j++) {
			if(tu[i][j]<10) printf("  %d",tu[i][j]);
			else printf(" %d",tu[i][j]);
		}
		printf("\n");
	}
	return 0;
}

/*这是个错的，暂时还没想通哪错了，一变方向直接加10或减10，不知道哪来的*/

#include<bits/stdc++.h>
using namespace std;
int main() {
	int tu[10][10];
	int n;
	scanf("%d",&n);
	memset(tu,0,sizeof(tu));
	int x=1,y=1;
	tu[x][y]=1;
	int k=1;
	while(k<n*n) {
		while(y<n&&tu[x][y+1]==0) tu[x][++y]=++k;
		while(x<n&&tu[x+1][y]==0) tu[++x][y]=++k;
		while(y>1&&tu[x][y-1]==0) tu[x][--y]=++k;
		while(x>1&&tu[x-1][y]==0) tu[--x][y]=++k;
	}
	for(int i=1;i<=n;i++) {
		for(int j=1;j<=n;j++) {
			if(tu[i][j]<10) printf("  %d",tu[i][j]);
			else printf(" %d",tu[i][j]);
		}
		printf("\n");
	}
	return 0;
}

/*调一下等号就好了，因为是++k，先加后赋值*/

数组存方向  dir[4][2]={{1,0},{0,1},{0,-1},{-1,0}};


//做到了相似的题目，然后自己（算是吧）做出来了
//题目如下
描述
回形取数就是沿矩阵的边取数，若当前方向上无数可取或已经取过，则左转90度。一开始位于矩阵左上角，方向向下。

输入
输入第一行是两个不超过 200 的正整数 m, n，表示矩阵的行和列。接下来 m 行每行 n 个整数，表示这个矩阵。

输出
输出只有一行，共 m * n 个数，为输入矩阵回形取数得到的结果。数之间用一个空格分隔，行末不要有多余的空格。

输入样例 1 
3 3
1 2 3
4 5 6
7 8 9
输出样例 1
1 4 7 8 9 6 3 2 5

输入样例 2 
3 2
1 2
3 4
5 6
输出样例 2
1 3 5 6 4 2

//AC代码给出~
#include<iostream>
#include<cstdio>
#include<string>
#include<cstring>
#include<bits/stdc++.h>

using namespace std;

int sum[1010];
bool flag[210][210];

int main() {
	int m,n;
	scanf("%d%d",&m,&n);
	int mat[210][210];
	for(int i=1;i<=m;i++) {
		for(int j=1;j<=n;j++) {
			cin>>mat[i][j];
		}
	}
	int k=1;
	int x=1,y=1;
	cout<<mat[x][y];
	flag[x][y]=1;
	while(k<m*n) {
		while(x<m&&!flag[x+1][y]) {
			cout<<' '<<mat[++x][y];
			flag[x][y]=1;
			k++;
		}
		while(y<n&&!flag[x][y+1]) {
			cout<<' '<<mat[x][++y];
			flag[x][y]=1;
			k++;
		}
		while(x>1&&!flag[x-1][y]) {
			cout<<' '<<mat[--x][y];
			flag[x][y]=1;
			k++;
		}
		while(y>1&&!flag[x][y-1]) {
			cout<<' '<<mat[x][--y];
			flag[x][y]=1;
			k++;
		}
	}
	return 0;
}

//非常丑陋，希望有一天可以写的漂亮点
//大概在我学完图论以后了吧....
